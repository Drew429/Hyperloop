// 
// hyperloop capsule area model
//

setThermoPackage( "Janaf" );


//------------------------------------------------------------------------
//                           Explicit Calculation
//------------------------------------------------------------------------

//------------------------------------------------------------------------
//                         End Explicit Calculation
//------------------------------------------------------------------------

//------------------------------------------------------------------------
//                           Output Data Viewers 
//------------------------------------------------------------------------
#include <area.view_page>  

real vehicleMach = 0.71;
real cmpMach = 0.65;
real PsTube = 0.014359;  // 99 Pa
real TsTube = 524.0;
real Atube, Dtube, AtubeB, AtubeC;
real Apod, Abypass, Dpod, blockage = 0.90;
real Apax, Adiff, Acmprssd;


Element FlowStart start {
   W = 3.;
   Pt = 0.02;
   Tt = 550.;
   void preexecute() { 
      Fl_O.MN = vehicleMach;
   }
}


Element Duct tube {
   void preexecute() { 
      Fl_O.MN = vehicleMach;
      Atube = Fl_O.Aphy/(3.281**2.)/(144.);
   }
}


Element Splitter split {
   BPR = 1.0;

   void preexecute() {
      Fl_01.MN = Fl_I.MN;
      Fl_02.MN = Fl_I.MN;
   } 

   void postexecute() {
      AtubeC = Fl_01.Aphy/(3.281**2.)/(144.);
      AtubeB = Fl_02.Aphy/(3.281**2.)/(144.);
   }
}


Element Duct intake {

   void preexecute() {
      Fl_O.MN = cmpMach;
      if ( cmpMach > vehicleMach ) { Fl_O.MN = vehicleMach; }
   } 

   void postexecute() {
      Adiff = Fl_O.Aphy/(3.281**2.)/(144.);
      Apod  = Fl_O.Aphy/(3.281**2.)/(144.)/blockage;   // Adiff/blockage
   }
}

Element Compressor cmp25 {
   PRdes = 12.47;
   effDes = 0.90;

   // in reality this must be slower but the internal duct can accel the flow
   void preexecute() {
      Fl_O.MN = cmpMach;
      if ( cmpMach > vehicleMach ) { Fl_O.MN = vehicleMach; }
   } 

   // N = 10000.;
}

Element Shaft shaft {
   ShaftInputPort Sh_cmp;
   Nmech = 10000.;
}

Element Duct intDuct {

   void preexecute() {
      Fl_O.MN = cmpMach;
      if ( cmpMach > vehicleMach ) { Fl_O.MN = vehicleMach; }
   } 

   void postexecute() {
      Acmprssd = Fl_O.Aphy/(3.281**2.)/(144.);
      Apax = Adiff - Acmprssd;
   }
}


Element Duct bypass {
   Fl_O.MN = 1.;
   
   void postexecute() {
      Abypass = Fl_O.Aphy/(3.281**2.)/(144.);
   }
}


Element FlowEnd endB {
}

Element FlowEnd endC {
}



//------------------------------------------------------------------------
//                           Component Linkages
//------------------------------------------------------------------------
linkPorts( "start.Fl_O"      , "tube.Fl_I"        , "FS_0"     ) ;
linkPorts( "tube.Fl_O"       , "split.Fl_I"       , "FStube"   ) ;
linkPorts( "split.Fl_01"     , "intake.Fl_I"      , "FStubeC"  ) ;
linkPorts( "split.Fl_02"     , "bypass.Fl_I"      , "FStubeB"  ) ;
linkPorts( "bypass.Fl_O"     , "endB.Fl_I"        , "FSbypass" ) ;
//linkPorts( "intake.Fl_O"     , "endC.Fl_I"        , "FSdiffused" ) ;
linkPorts( "intake.Fl_O"     , "cmp25.Fl_I"       , "FSdiffused" ) ;
linkPorts( "cmp25.Fl_O"      , "intDuct.Fl_I"     , "FScompressed" ) ;
linkPorts( "intDuct.Fl_O"    , "endC.Fl_I"        , "FSintduct" ) ;

linkPorts( "cmp25.Sh_O"      , "shaft.Sh_cmp"     , "CMPwork" ) ;



Independent ind_Pt {
   varName = "start.Pt";
   autoSetup = TRUE;
}

Independent ind_Tt {
   varName = "start.Tt";
   autoSetup = TRUE;
}

Independent ind_W {
   varName = "start.W";
   autoSetup = TRUE;
}

Independent ind_BPR {
   varName = "split.BPR";
   autoSetup = TRUE;
}


Dependent dep_Ps {
   eq_rhs = "start.Fl_O.Ps";
   eq_lhs = "PsTube";
   autoSetup = TRUE;
}

Dependent dep_Ts {
   eq_rhs = "start.Fl_O.Ts";
   eq_lhs = "TsTube";
   autoSetup = TRUE;
}

Dependent dep_Apod {
   eq_rhs = "Apax"; // "start.Fl_O.Aphy";
   eq_lhs = "1.40"; // "3.618*(3.281**2.)*(144.)";
   autoSetup = TRUE;
}

Dependent dep_Amatch {
   eq_rhs = "AtubeB + AtubeC";
   eq_lhs = "Abypass + Apod";
   autoSetup = TRUE;
}


//------------------------------------------------------------------
//     Run cases
//------------------------------------------------------------------
setOption( "switchDes", "DESIGN" );
solver.maxJacobians = 100;
solver.maxIterations = 100;

autoSolverSetup();
solver.removeDependent( "shaft.integrate_Nmech" );
run();
page.display();



// Atube   AtubeB  AtubeC    Abypass    Apod    Adiff    Ablk    Acmp    Apax
void printStuff() {
   cout.precision=5; cout.showpoint = TRUE;
   cout << vehicleMach << "     ";
   cout << Atube << "    " << AtubeB << "    " << AtubeC << "          "
        << Abypass  << "    " << Apod   << "    " << Adiff << "    "
        << (Apod - Adiff ) << "    " << Acmprssd  << "    " << Apax << endl;

}


void runCases() { 
   for ( vehicleMach = 0.60; vehicleMach <= 0.91; vehicleMach +=0.02 ) {
      run();
      page.display();
      printStuff();
   } 
} 

cmpMach = 0.60; runCases(); cout << endl;
cmpMach = 0.65; runCases(); cout << endl;
cmpMach = 0.70; runCases(); cout << endl;
